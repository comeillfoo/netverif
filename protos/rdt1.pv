set ignoreTypes = false.
set traceDisplay = long.

type send_result.

const SendMsg: send_result.
const CorruptMsg: send_result.
const LostMsg: send_result.


free nr_onsend_c: channel [private].
free nr_recved_c: channel [private].
free trigger_recv_c: channel [private].
free udata_c: channel [private].


free Payload: bitstring [private].

fun corrupt(bitstring): bitstring.

fun corrupted(bitstring, send_result): bitstring
    reduc forall x: bitstring; corrupted(x, CorruptMsg) = corrupt(x)
    otherwise forall x: bitstring, y: send_result; corrupted(x, y) = x.

fun packets(): nat
reduc packets() = 10.


event evSenderLost(nat).
event evSenderStopped(nat).

event evPacketDelivered(bitstring).
event evNumPacketDelivered(nat).
event evReceiverStopped(nat).


(* ensure that sender stops after N messages *)
query n: nat; inj-event(evSenderStopped(n)) ==> n = 0.

(* ensure that receiver can receive less than N messages *)
query n: nat; inj-event(evReceiverStopped(n)) ==> n < 10.

(* there are queries to justify that proto is not resistant to corruptions and losses *)
(* 1. corrupted packet can be delivered *)
query packet: bitstring; inj-event(evPacketDelivered(corrupt(packet))) ==> packet = Payload.

(* 2. lost message is not delivered *)
query x: nat; inj-event(evNumPacketDelivered(x)) && inj-event(evSenderLost(x)).


let rdt1_send_single(nr: nat, packet: bitstring) =
    new outcome: send_result;
    if outcome = SendMsg || outcome = CorruptMsg then
        out(udata_c, (corrupted(packet, outcome), nr))
    else (* if outcome = LostMsg then *)
        event evSenderLost(nr).


let rdt1_send(packet: bitstring) =
    in(nr_onsend_c, packets_left: nat);
    if packets_left > 0 then
        out(trigger_recv_c, true);
        out(nr_onsend_c, packets_left - 1);
        rdt1_send_single(packets_left, packet)
    else
        out(trigger_recv_c, false);
        out(nr_onsend_c, packets_left);
        event evSenderStopped(packets_left).


let rdt1_recv() =
    in(trigger_recv_c, should_receive: bool);
    in(nr_recved_c, nr_delivered: nat);
    if should_receive then
        in(udata_c, (packet: bitstring, nr_packet: nat));
        event evPacketDelivered(packet);
        event evNumPacketDelivered(nr_packet);
        out(nr_recved_c, nr_delivered + 1)
    else
        out(nr_recved_c, nr_delivered);
        event evReceiverStopped(nr_delivered).


(******************************************
 * rdt1.0: no checks
 *
 * not resistant to anything
 *****************************************)
process out(nr_onsend_c, packets()) |
        out(nr_recved_c, 0) |
        ! rdt1_send(Payload) |
        ! rdt1_recv()

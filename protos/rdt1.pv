set ignoreTypes = false.
set traceDisplay = long.

type send_result.

free SendMsg: send_result.
free CorruptMsg: send_result.
free LostMsg: send_result.


free udchan: channel [private].

free Payload: bitstring [private].

fun corrupt(bitstring): bitstring.

event evSent(send_result).
event evRecv(bitstring).


(* possible to receive corrupted payload *)
query x: bitstring; inj-event(evRecv(x)) && inj-event(evSent(CorruptMsg)) ==> x = corrupt(Payload).

(* not possible to receive a lost message *)
query (inj-event(evRecv(Payload)) && inj-event(evSent(LostMsg))).


let rdt1_send(packet: bitstring) =
    new action: send_result;
    event evSent(action);
    if action = SendMsg then
        out(udchan, packet); 0
    else
        if action = CorruptMsg then
            out(udchan, corrupt(packet)); 0
        else
            0.


let rdt1_recv() =
    in(udchan, packet: bitstring);
    event evRecv(packet);
    0.


(******************************************
 * rdt1.0: no checks
 *
 * not resistant to anything
 *****************************************)
process rdt1_send(Payload) | rdt1_recv()

set ignoreTypes = false.
set traceDisplay = long.

type send_result.

const SendMsg: send_result.
const CorruptMsg: send_result.
const LostMsg: send_result.

type reply_result.

const ReplyTimedOut: reply_result.
const ReplyReceived: reply_result.


free udata_c: channel [private].
free uack_c: channel [private].
free act_seqnums_c: channel [private].
free exp_seqnums_c: channel [private].

free Payload: bitstring [private].
free ACK: bitstring [private].
free NACK: bitstring [private].


fun corrupt(bitstring): bitstring.

fun should_corrupt(bitstring, send_result): bitstring
    reduc forall x: bitstring; should_corrupt(x, CorruptMsg) = corrupt(x)
    otherwise forall x: bitstring, y: send_result; should_corrupt(x, y) = x.


event evSenderSendResult(send_result).
event evReceiverRecvResult(bitstring).

event evSenderRepeat.
event evReceiverRepeat.

event evReceiverSendResult(send_result).
event evSenderRecvResult(bitstring).


(* possible to receive corrupted payload *)
query x: bitstring; inj-event(evReceiverRecvResult(x)) && inj-event(evSenderSendResult(CorruptMsg)) ==> x = corrupt(Payload).

(* not possible to receive a lost message *)
query (inj-event(evReceiverRecvResult(Payload)) && inj-event(evSenderSendResult(LostMsg))).

(* on every received corrupted packet or sent corrupted reply - need resend *)
query event(evSenderRepeat) ==> event(evReceiverRecvResult(corrupt(Payload))) || event(evReceiverSendResult(CorruptMsg)).

(*  *)

let rdt3_send(packet: bitstring) =
    new action: send_result; (* get random outcome: just send, lost msg and corrupt msg *)
    event evSenderSendResult(action);
    in(act_seqnums_c, act_seqnum: bool);
    if action = SendMsg then
        out(udata_c, (packet, act_seqnum));
        new replyResult: reply_result; (* simulate timeout *)
        if replyResult = ReplyTimedOut then
            event evSenderRepeat;
            out(act_seqnums_c, act_seqnum)
        else
            in(uack_c, (reply: bitstring, ack_seqnum: bool));
            event evSenderRecvResult(reply);
            if reply = NACK || reply = corrupt(NACK) || reply = corrupt(ACK) || ack_seqnum <> act_seqnum then
                event evSenderRepeat;
                out(act_seqnums_c, act_seqnum)
            else
                out(act_seqnums_c, not(act_seqnum))
    else
        if action = CorruptMsg then
            out(udata_c, (corrupt(packet), act_seqnum));
            new replyResult: reply_result; (* simulate timeout *)
            if replyResult = ReplyTimedOut then
                event evSenderRepeat;
                out(act_seqnums_c, act_seqnum)
            else
                in(uack_c, (reply: bitstring, ack_seqnum: bool));
                event evSenderRecvResult(reply);
                if reply = NACK || reply = corrupt(NACK) || reply = corrupt(ACK) || ack_seqnum <> act_seqnum then
                    event evSenderRepeat;
                    out(act_seqnums_c, act_seqnum)
                else
                    out(act_seqnums_c, not(act_seqnum))
        else (* lost message -> time out automatically *)
            out(act_seqnums_c, act_seqnum).


let rdt3_recv() =
    in(exp_seqnums_c, exp_seqnum: bool);
    in(udata_c, (packet: bitstring, act_seqnum: bool));
    event evReceiverRecvResult(packet);
    new reply_action: send_result;
    event evReceiverSendResult(reply_action);
    if packet = Payload then
        if exp_seqnum = act_seqnum then
            out(uack_c, (should_corrupt(ACK, reply_action), act_seqnum));
            out(exp_seqnums_c, not(exp_seqnum))
        else (* if wrong sequence number then [ACK past message] *)
            out(uack_c, (should_corrupt(ACK, reply_action), not(exp_seqnum)));
            out(exp_seqnums_c, exp_seqnum)
    else (* if corrupted payload then [ACK past message] *)
        out(uack_c, (should_corrupt(ACK, reply_action), not(exp_seqnum)));
        out(exp_seqnums_c, exp_seqnum);
        event evReceiverRepeat.


(******************************************
 * rdt3.0 features:
 * - sequence numbers in payload
 * - checksums in [N]ACKs
 * - sequence numbers in [N]ACKs
 * - ARQ
 * - retransmission on timeout
 *
 *****************************************)
process out(act_seqnums_c, false) | out(exp_seqnums_c, false) | (!(rdt3_send(Payload))) | (!(rdt3_recv()))
